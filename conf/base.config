/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/genomeassembly Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143, 255, 137, 64] ? 'retry' : 'terminate' }
    maxRetries = 10
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
        errorStrategy = { task.exitStatus in [143, 255, 137, 64] ? 'retry' : 'terminate' }
        maxRetries = 10
    }
    withLabel:process_single_high_mem {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 30.h  * task.attempt, 'time'    ) }
        errorStrategy = { task.exitStatus in [143, 255, 137, 64] ? 'retry' : 'terminate' }
        maxRetries = 10
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 20.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h   * task.attempt, 'time'    ) }
        errorStrategy = { task.exitStatus in [143, 255, 137, 64] ? 'retry' : 'terminate' }
        maxRetries = 10
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 100.h   * task.attempt, 'time'    ) }
        errorStrategy = { task.exitStatus in [143, 255, 137, 64] ? 'retry' : 'terminate' }
        maxRetries = 10
    }
    withLabel:process_meryl {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 200.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 600.h  * task.attempt, 'time'    ) }
        errorStrategy = { task.exitStatus in [143, 255, 137, 64] ? 'retry' : 'terminate' }
        maxRetries = 10
    }
    withLabel:process_high {
        cpus   = { check_max( 32    * task.attempt, 'cpus'    ) }
        memory = { check_max( 250.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 600.h  * task.attempt, 'time'    ) }
        errorStrategy = { task.exitStatus in [143, 255, 137, 64] ? 'retry' : 'terminate' }
        maxRetries = 10
    }
    withLabel:process_long {
        time   = { check_max( 100.h  * task.attempt, 'time'    ) }
        errorStrategy = { task.exitStatus in [143, 255, 137, 64] ? 'retry' : 'terminate' }
        maxRetries = 10
    }
    withLabel:process_high_memory {
        cpus   = { check_max( 38    * task.attempt, 'cpus'    ) }
        memory = { check_max( 500.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 600.h  * task.attempt, 'time'    ) }
        errorStrategy = { task.exitStatus in [143, 255, 137, 64] ? 'retry' : 'terminate' }
        maxRetries = 10
    }
    withLabel:process_xeon {
        cpus   = { check_max( 36    * task.attempt, 'cpus'    ) }
        memory = { check_max( 256.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 360.h  * task.attempt, 'time'    ) }
        errorStrategy = { task.exitStatus in [143, 255, 137, 64] ? 'retry' : 'terminate' }
        maxRetries = 10
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
        errorStrategy = { task.exitStatus in [143, 255, 137, 64] ? 'retry' : 'terminate' }
        maxRetries = 10
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    
}
