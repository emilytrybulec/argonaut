/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CENTRIFUGE_CENTRIFUGE {
        ext.args = "--min-hitlen 50"
        publishDir = [
            path: { "${params.outdir}/01_read_qc/decontam_centrifuge/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CENTRIFUGE_KREPORT {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/decontam_centrifuge/kreport" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: RECENTRIFUGE_C {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/decontam_centrifuge/visualization" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: RECENTRIFUGE_KR {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/decontam_kraken2/visualization/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NANOPLOT {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/nanoplot/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KMER_FREQ {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/genome_size_est/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GCE {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/genome_size_est/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: EXTRACT_SR {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/genome_size_est/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: EXTRACT_LR {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/genome_size_est/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: EXTRACT_PB {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/genome_size_est/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FORMAT {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/genome_size_est/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: TOTAL_BASES_LR {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: TOTAL_BASES_SR {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COVERAGE_LR {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COVERAGE_LR_PB {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COVERAGE_SR {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SEQKIT_SEQ {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/lr_lengthfilter/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }    

    withName: SEQKIT_GREP {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/decontam_centrifuge/filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }    

    withName: CAT {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/ont_hifi_cat" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }    

    withName: FLYE {
        publishDir = [
            path: { "${params.outdir}/02_assembly/long_read/flye" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CANU {
        publishDir = [
            path: { "${params.outdir}/02_assembly/long_read/canu" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: HIFIASM {
        publishDir = [
            path: { "${params.outdir}/02_assembly/long_read/hifiasm" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: REDUNDANS_A {
        publishDir = [
            path: { "${params.outdir}/02_assembly/short_read/redundans" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QUAST {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/quast" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BUSCO {
        ext.args = '-m genome'
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/busco" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COMPLEASM {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/compleasm" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MERQURY {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/merqury" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MERYL_COUNT {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/merqury/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: WINNOWMAP {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/winnowmap" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_INDEX {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/samtools" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_SORT {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/samtools" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BWAMEM2_INDEX {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/bwamem2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BWAMEM2_MEM {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/bwamem2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MASURCA {
        publishDir = [
            path: { "${params.outdir}/02_assembly/hybrid/masurca" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        maxRetries = 5
    }

    withName: MASURCA_SR {
        publishDir = [
            path: { "${params.outdir}/02_assembly/short_read/masurca" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        maxRetries = 5
    }

    withName: MASURCA_SR_ADV {
        publishDir = [
            path: { "${params.outdir}/02_assembly/short_read/masurca" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        maxRetries = 5
    }

    withName: MEDAKA {
        publishDir = [
            path: { "${params.outdir}/03_polish/medaka" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        maxRetries = 5
    }

    withName: RACON {
        publishDir = [
            path: { "${params.outdir}/03_polish/racon" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        maxRetries = 5
    }

    withName: GUNZIP {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/gunzip/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GZIP {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/gzip/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUTADAPT {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/pb_cutadapt" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: FASTQC_2 {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/fastqc/2_adapter_trim" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC_3 {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/fastqc/3_decontam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/fastqc/1_raw_reads" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTP {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/fastp" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GENOMESCOPE2 {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/genome_size_est/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: JELLYFISH_HIST {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/genome_size_est/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: JELLYFISH_KMER {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/genome_size_est/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KRAKEN2_KRAKEN2_SR {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/decontam_kraken2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KRAKEN2_KRAKEN2_PB {
        publishDir = [
            path: { "${params.outdir}/01_read_qc/decontam_kraken2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: POLCA {
        publishDir = [
            path: { "${params.outdir}/03_polish/polca" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PILON {
        publishDir = [
            path: { "${params.outdir}/03_polish/pilon" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: HISTOGRAM {
        publishDir = [
            path: { "${params.outdir}/04_purge/histogram/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PURGE {
        publishDir = [
            path: { "${params.outdir}/04_purge/purge_hap/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: REDUNDANS_P {
        publishDir = [
            path: { "${params.outdir}/04_purge/sr_redundans/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ALIGN {
        publishDir = [
            path: { "${params.outdir}/04_purge/align/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: RAGTAG {
        publishDir = [
            path: { "${params.outdir}/05_scaffold/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BLOBTOOLS_CONFIG {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/blobtools" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BLOBTOOLS_RUN {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/blobtools" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BLOBTOOLS_VIEW {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/blobtools" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BLOBTOOLS_BLAST {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/blobtools/blast_hits" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: OUTPUT_FORMAT {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: OUTPUT {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/${meta.id}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: OUTPUT_COMBINE {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
